services:
  zitadel:
    extends:
      service: zitadel-init
    restart: "always"
    command: "start-from-setup --init-projections --masterkeyFromEnv"
    env_file: ./env/prod/.env.zitadel
    labels:
      - traefik.enable=true
      - traefik.http.routers.iam.rule=Host(`iam.melvinweiershaeuser.de`)
      - traefik.http.services.iam.loadbalancer.server.scheme=h2c
      - traefik.http.services.iam.loadbalancer.passHostHeader=true
      - traefik.http.services.iam.loadbalancer.server.port=8080
    networks:
      - "zitadel"
      - "traefik_net"
    depends_on:
      zitadel-init:
        condition: "service_completed_successfully"
      db:
        condition: "service_healthy"

  zitadel-init:
    image: "ghcr.io/zitadel/zitadel:latest"
    command: "init"
    env_file: ./env/prod/.env.zitadel_init
    healthcheck:
      test: ["CMD", "/app/zitadel", "ready"]
      interval: "10s"
      timeout: "5s"
      retries: 5
      start_period: "10s"
    networks:
      - "zitadel"
    depends_on:
      db:
        condition: "service_healthy"

  db:
    restart: "always"
    image: postgres:16-alpine
    env_file: ./env/prod/.env.db
    volumes:
      - "data:/var/lib/postgresql/data"
    networks:
      - "zitadel"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "zitadel", "-U", "postgres"]
      interval: 5s
      timeout: 60s
      retries: 10
      start_period: 5s

volumes:
  data:

networks:
  zitadel:
  traefik_net:
    external: true
